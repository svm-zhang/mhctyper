{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mhctyper","text":"<p>Polars-accelerated MHC class I and II typing based on Polysolver algorithm.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Supports both class I and II typing with good   accuracy.</li> <li>Runtime speedup boosted by polars.</li> <li>Minimum I/O operations. Easy integration to workflow/pipeline with better CLI and proper packaging.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install mhctyper from PyPI</p> pip <pre><code>pip install mhctyper\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"<p><code>mhctyper</code> simply requires 2 inputs:</p> <ul> <li>Alignment to HLA alleles in BAM format: <code>$bam</code>.</li> <li>Population frequency from the original <code>polysolver</code>: <code>HLA_FREQ.txt</code>.</li> </ul> <pre><code>mhctyper --bam \"$bam\" \\\n--freq \"HLA_FREQ.txt\" \\\n--outdir \"$outdir\" \\\n--nproc 8\n</code></pre>"},{"location":"#output-explain","title":"Output explain","text":"<p>The above <code>mhctyper</code> command yields 3 output files:</p> <ul> <li><code>{RG_SM}.a1.tsv</code>: score table for the first allele.</li> <li><code>{RG_SM}.a2.tsv</code>: score table for the second allele.</li> <li><code>{RG_SM}.hlatyping.res.tsv</code>: HLA typing result.</li> </ul> <p><code>{RG_SM}</code> represents the value of <code>SM</code> field of read group provided in the given BAM file. <code>mhctyper</code> checks the existence of read group information and terminates if either no or more than one read group value set.</p>"},{"location":"#score-table","title":"Score table","text":"<p>Score table has following format with self-explanatory columns:</p> qnames scores allele gene SRR702076.1195861 4645.90100859441 hla_a_01_01_01_01 hla_a SRR702076.11670250 4644.914284618211 hla_a_01_01_01_01 hla_a SRR702076.3308570 4645.911824273519 hla_a_01_01_01_01 hla_a SRR702076.23151566 4645.900731687712 hla_a_01_01_01_01 hla_a <p>Each row represents the score typed for an allele from one read (not a pair).</p>"},{"location":"#hla-typing-result","title":"HLA typing result","text":"<p>HLA typing result contains 4 columns:</p> <ul> <li>allele: typed alleles.</li> <li>gene: HLA gene locus.</li> <li>tot_scores: total loglikelihood scores for 2 alleles per gene locus.</li> </ul> allele gene tot_scores sample hla_a_11_01_01 hla_a 4120184.7405 NA18740 hla_a_11_01_01 hla_a 2060092.3702 NA18740 hla_b_13_01_01 hla_b 1054296.1982 NA18740 hla_b_40_01_02 hla_b 1221557.8978 NA18740 hla_c_03_04_04 hla_c 1474826.4096 NA18740 hla_c_07_02_10 hla_c 1913741.4495 NA18740"},{"location":"#filters-applied-silently","title":"Filters applied silently","text":"<p><code>mhctyper</code> quietly applies the following filters during typing:</p> <ul> <li>Only properly aligned read pairs are used.</li> <li>QC-failed, supplementary, and duplicate-marked alignments are removed (exclude sam flag = 3584).</li> <li>Alignments with indels are removed.</li> <li>Alignments with mismatches more than specified value of <code>--min_ecnt</code> are removed.</li> <li>HLA alleles (their 4-digits representation) who have zero population allele frequency across all populations defined in the <code>HLA_FREQ.txt</code> file are excluded from typing.</li> </ul>"},{"location":"#notes","title":"Notes","text":""},{"location":"#optimal-value-for-min_ecnt","title":"Optimal value for --min_ecnt","text":"<p><code>mhctyper</code> provides a single customizable parameter <code>--min_ecnt</code> to control for the alignments used in the typing. The lower the value, the more \"high quality\" data is used (but less in quantity). On the 1000 genome dataset, I found setting <code>--min_ecnt</code> to 1 gives fairly good result. You can tune this parameter to find the best value for your data. By default, all alignments, regardless of the number of mismatch events allowed, will be used.</p>"},{"location":"#race","title":"Race","text":"<p>Unlike the original <code>polysovler</code> algorithm, <code>mhctyper</code> does not provide a <code>race</code> option. This is intentional because most of the case we do not have such demographic information to begin with. From testing on 1000 genome dataset, this does not affect the typing result.</p>"},{"location":"#break-and-continue","title":"Break and continue","text":"<p>Scoring for the first allele will take the majority runtime of <code>mhctyper</code>. Therefore, once the score table for the first allele is generated, <code>mhctyper</code> will not repeat it to avoid walking through the BAM file for another time. You can use <code>--overwrite</code> option to force <code>mhctyper</code> to re-score the first allele.</p>"},{"location":"#run-mhctyper-in-debug-mode","title":"Run mhctyper in debug mode","text":"<p>If you encounter errors when running <code>mhctyper</code> on your data, you can toggle the debug mode to generate a log file under the output folder you specify. Sharing the debug file will very useful for quickly identifying the problem(s). In debug mode, <code>mhctyper</code> will automatically switch to single process and ignore the value (8 in the example below) provided via <code>--nproc</code> option.</p> <pre><code>mhctyper --bam \"$bam\" \\\n    --freq \"HLA_FREQ.txt\" \\\n    --outdir \"$outdir\" \\\n    --nproc 8 \\\n    --debug\n</code></pre>"},{"location":"#citation","title":"Citation","text":"<p>Please cite the original Polysolver paper.</p> <p>If you use <code>mhctyper</code>, please cite the github repo.</p>"}]}